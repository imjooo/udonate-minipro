
Python collections 

 1)List is a collection       which is ordered and changeable. Allows duplicate members.
 2)Tuple is a collection      which is ordered and unchangeable. Allows duplicate members.
 3)Set is a collection        which is unordered and unindexed. No duplicate members.
 4)Dictionary is a collection which is ordered* and changeable. No duplicate members.

1)List

	*Lists are used to store multiple items in a single variable.
	*Lists are created using square brackets:
		eg:-
		   mylist = ["apple", "banana", "cherry"]
		   print(mylist)
	*List items are ordered, changeable, and allow duplicate values.

	*List items are indexed, the first item has index [0], the second item has index [1] etc
		eg:-
			thislist = ["apple", "banana", "cherry"]
			print(thislist[1])
	*len() is use to find the length of the list

		eg:-
			thislist = ["apple", "banana", "cherry"]
			print(len(thislist))

         *list can contain item with any datatype
		eg:-
			list1 = ["apple", "banana", "cherry"]
			list2 = [1, 5, 7, 9, 3]
			list3 = [True, False, False]
			list1 = ["abc", 34, True, 40, "male"]
			

	*It is also possible to use the list() constructor when creating a new list.

		eg:-
			thislist = list(("apple", "banana", "cherry")) 
			# note the double round-brackets
			print(thislist)

	*Access Items
		eg1:-
		thislist = ["apple", "banana", "cherry"]
		print(thislist[1])
		eg2:-
			thislist = ["apple", "banana", "cherry"]
			for x in thislist:
				print(x)
		eg3:-
			thislist = ["apple", "banana", "cherry"]
			i=0
			while i< len(thislist):
				print(thislist[i])
				i+=1
	*nexted list
 			eg:-
				list2=[56,78,[67,89]]
				print(list2[2][0])



	*Change Item Value
		eg:-
		thislist = ["apple", "banana", "cherry"]
		thislist[1] = "blackcurrant"
		print(thislist)


	*Negative indexing means start from the end

		-1 refers to the last item, -2 refers to the second last item etc.
			eg:-
			thislist = ["apple", "banana", "cherry"]
			print(thislist[-1])

	*Range of Indexes
		You can specify a range of indexes by specifying where to start and where to end the range.

		When specifying a range, the return value will be a new list with the specified items.
			
			eg1:-
			thislist = ["apple", "banana", "cherry", "orange", "kiwi", "melon", "mango"]
			print(thislist[2:5])

			eg2:-
			thislist = ["apple", "banana", "cherry", "orange", "kiwi", "melon", "mango"]
			print(thislist[:4])

			eg3:-
			thislist = ["apple", "banana", "cherry", "orange", "kiwi", "melon", "mango"]
			print(thislist[2:])
			
			eg4:-
			thislist= ["apple", "banana", "cherry", "orange", "kiwi", "melon", "mango"]
			y=thislist[:4]
			x=thislist[4:]
			print(x)
			print(y)

	* to check value exist
		eg:- 
			thislist = ["apple", "banana", "cherry"]
			if "apple" in thislist:
			  print("Yes, 'apple' is in the fruits list")

	*Add item
		a)To add an item to the end of the list, use the append() method:

		eg:-
			thislist = ["apple", "banana", "cherry"]
			thislist.append("orange")
			print(thislist)

		b)To insert a list item at a specified index, use the insert() method.

		The insert() method inserts an item at the specified index
		eg:-
			thislist = ["apple", "banana", "cherry"]
			thislist.insert(1, "orange")
			print(thislist)


		c)To append elements from another list to the current list, use the extend() method.

		eg:-
			thislist = ["apple", "banana", "cherry"]
			tropical = ["mango", "pineapple", "papaya"]
			thislist.extend(tropical)
			print(thislist)

		The extend() method does not have to append lists, you can add any iterable object
			 (tuples, sets, dictionaries etc.).
		eg:-	
			thislist = ["apple", "banana", "cherry"]
			thistuple = ("kiwi", "orange")
			thislist.extend(thistuple)
			print(thislist)



	*Remove data from list
		eg:-
			thislist = ["apple", "banana", "cherry"]
			thislist.remove("banana")
			print(thislist)
	*Remove Specified Index
		eg:-
			thislist = ["apple", "banana", "cherry"]
			thislist.pop(1)
	*remove last item
		eg:-
			print(thislist)
			thislist = ["apple", "banana", "cherry"]
			thislist.pop()
			print(thislist)
		eg2:-
			thislist = ["apple", "banana", "cherry"]
			del thislist[0]
			print(thislist)
		eg3:-
			thislist = ["apple", "banana", "cherry"]
			del thislist
			print(thislist)
		eg4:-
			thislist = ["apple", "banana", "cherry"]
			thislist.clear()
			print(thislist)
......................................................................................................................
  Activity 1:
   wap to store,retrive,edit,delete details of a student such as (name,age,address) [hint:- use list operation]
.....................................................................................................................

Sort List 
eg1:
	thislist = ["orange", "mango", "kiwi", "pineapple", "banana"]
	thislist.sort()
	print(thislist)

eg2:
	thislist = [100, 50, 65, 82, 23]
	thislist.sort()
	print(thislist)


Sort Descending

sort descending, use the keyword argument reverse = True
eg1:-
	thislist = ["orange", "mango", "kiwi", "pineapple", "banana"]
	thislist.sort(reverse = True)
	print(thislist)

eg2:-
	thislist = [100, 50, 65, 82, 23]
	thislist.sort(reverse = True)
	print(thislist)

By default the sort() method is case sensitive, resulting in all capital letters being sorted before lower case 
letters:

if you want a case-insensitive sort function, use str.lower as a key function:

thislist = ["banana", "Orange", "Kiwi", "cherry"]
thislist.sort(key = str.lower)
print(thislist)


Reverse Order


The reverse() method reverses the current sorting order of the elements.
eg:-
	thislist = ["banana", "Orange", "Kiwi", "cherry"]
	thislist.reverse()
	print(thislist)

Copy a List

  You cannot copy a list simply by typing list2 = list1, because: list2 will only be a reference to list1,
     and changes made in list1 will automatically also be made in list2.
  There are ways to make a copy, one way is to use the built-in List method copy().

method 1:-
	thislist = ["apple", "banana", "cherry"]
	mylist = thislist.copy()
	print(mylist)
Another way to make a copy is to use the built-in method list().

method 2:-
	thislist = ["apple", "banana", "cherry"]
	mylist = list(thislist)
	print(mylist)


Join Two Lists

several ways to join, or concatenate, two or more lists in Python.

method 1 :-
	list1 = ["a", "b", "c"]
	list2 = [1, 2, 3]

	list3 = list1 + list2
	print(list3)

method 2 :-
	list1 = ["a", "b" , "c"]
	list2 = [1, 2, 3]

	for x in list2:
  		list1.append(x)

	print(list1)

method 3 :-

	list1 = ["a", "b" , "c"]
	list2 = [1, 2, 3]

	list1.extend(list2)
	print(list1)




list methods

append()	Adds an element at the end of the list
clear()		Removes all the elements from the list
copy()		Returns a copy of the list
count()		Returns the number of elements with the specified value
extend()	Add the elements of a list (or any iterable), to the end of the current list
index()		Returns the index of the first element with the specified value
insert()	Adds an element at the specified position
pop()		Removes the element at the specified position
remove()	Removes the item with the specified value
reverse()	Reverses the order of the list
sort()		Sorts the list


Tuple

	*Tuples are used to store multiple items in a single variable.
	*Tuple is one of 4 built-in data types in Python used to store collections of data, 
		the other 3 are List, Set, and Dictionary, all with different qualities and usage.
	*A tuple is a collection which is ordered and unchangeable.

	*Tuples are written with round brackets.
	eg:-
		thistuple = ("apple", "banana", "cherry")
		print(thistuple)

	*Tuple items are ordered, unchangeable, and allow duplicate values.

	*Tuple items are indexed, the first item has index [0], the second item has index [1] etc.

	*Tuples allow duplicate values:

	eg 2:-
		thistuple = ("apple", "banana", "cherry", "apple", "cherry")
		print(thistuple)

	note:-To create a tuple with only one item, you have to add a comma after the item,
	 otherwise Python will not recognize it as a tuple.

	eg:-
		thistuple = ("apple")#NOT a tuple
		print(type(thistuple))# output will be string
	eg:-1
		thistuple = ("apple",)
		print(type(thistuple))# output tuple

	note: type() will return the data type of a value
		eg:-
			print(type(4))
			print(type("hello"))
	

	It is also possible to use the tuple() constructor to make a tuple.

	eg:2
	thistuple = tuple(("apple", "banana", "cherry")) # note the double round-brackets
	print(thistuple)


Access tuple
	eg:1
		thistuple = ("apple", "banana", "cherry")
		print(thistuple[1])

Negative Indexing
	Negative indexing means start from the end.

	-1 refers to the last item, -2 refers to the second last item etc.
	eg:-
		thistuple = ("apple", "banana", "cherry")
		print(thistuple[-1])

Range of Indexes
		eg 1 :-
		thistuple = ("apple", "banana", "cherry", "orange", "kiwi", "melon", "mango")
		print(thistuple[2:5])

		eg 2 :-
		thistuple = ("apple", "banana", "cherry", "orange", "kiwi", "melon", "mango")
		print(thistuple[:4])

		eg 3:-
		thistuple = ("apple", "banana", "cherry", "orange", "kiwi", "melon", "mango")
		print(thistuple[2:])

Range of Negative Indexes
	Specify negative indexes if you want to start the search from the end of the tuple:
		eg 4 :-
		thistuple = ("apple", "banana", "cherry", "orange", "kiwi", "melon", "mango")
		print(thistuple[-4:-1])


Check if Item Exists
	eg:-
		thistuple = ("apple", "banana", "cherry")
		if "apple" in thistuple:
  			print("Yes, 'apple' is in the fruits tuple")

Update Tuples
	*Tuples are unchangeable, meaning that you cannot change, add, or remove items once the tuple is created.

	*But there are some workarounds.
		1)you can convert the tuple into a list, change the list, and convert the list back into a tuple.

			eg:-
				x = ("apple", "banana", "cherry")
				y = list(x)
				y[1] = "kiwi"
				x = tuple(y)
				print(x)
Add Items
 	Convert into a list: Just like the workaround for changing a tuple, 
	you can convert it into a list, add your item(s), and convert it back into a tuple.
		eg:-
			thistuple = ("apple", "banana", "cherry")
			y = list(thistuple)
			y.append("orange")
			thistuple = tuple(y)

	Add tuple to a tuple. You are allowed to add tuples to tuples,
	so if you want to add one item, (or many), 
	create a new tuple with the item(s),
	and add it to the existing tuple:
		EG:-
		thistuple = ("apple", "banana", "cherry")
		y = ("orange",)
		thistuple += y

		print(thistuple)

	Note: When creating a tuple with only one item, remember to include a comma after the item,
		 otherwise it will not be identified as a tuple.

Remove Items
	Note: You cannot remove items in a tuple.

	Tuples are unchangeable, so you cannot remove items from it, 
	but you can use the same workaround as we used for changing and adding tuple items:
	
		eg 1:-
			thistuple = ("apple", "banana", "cherry")
			y = list(thistuple)
			y.remove("apple")
			thistuple = tuple(y)

	Or you can delete the tuple completely:

		eg 2:-
			thistuple = ("apple", "banana", "cherry")
			del thistuple
			print(thistuple) 
			#this will raise an error because the tuple no longer exists

packing:-

	When we create a tuple, we normally assign values to it. This is called "packing" a tuple:
unpacking:-	
	we are also allowed to extract the values back into variables. This is called "unpacking"
	Eg:
		fruits = ("apple", "banana", "cherry") #packing
		(green, yellow, red) = fruits #unpacking
		print(green)
		print(yellow)
		print(red)


Using Asterisk*
	If the number of variables is less than the number of values, 
	you can add an * to the variable name and the values will be 
	assigned to the variable as a list:

	eg 2:-
		fruits = ("apple", "banana", "cherry", "strawberry", "raspberry")

		(green, yellow, *red) = fruits

		print(green)
		print(yellow)
		print(red)

	If the asterisk is added to another variable name than the last,
	 Python will assign values to the variable until the number of values
	 left matches the number of variables left.
		eg 3:-
			fruits = ("apple", "mango", "papaya", "pineapple", "cherry")
			(green, *tropic, red) = fruits
			print(green)
			print(tropic)
			print(red)

		eg 4:-
			fruits = ("apple", "banana", "cherry", "strawberry", "raspberry")

			(*green, yellow, red) = fruits

			print(green)
			print(yellow)
			print(red)

-------------------------------------------------------------------------------------------------------------------
########################################     Activity 1 Repeat          ###########################################
-------------------------------------------------------------------------------------------------------------------

looping
	thistuple = ("apple", "banana", "cherry")
	for x in thistuple:
  		print(x)

Join Two Tuples

	eg:-

	tuple1 = ("a", "b" , "c")
	tuple2 = (1, 2, 3)

	tuple3 = tuple1 + tuple2
	print(tuple3)

	eg:-
	fruits = ("apple", "banana", "cherry")
	mytuple = fruits * 2

	print(mytuple)# out put ("apple", "banana", "cherry","apple", "banana", "cherry")


tuple methods

	count()	 Returns the number of times a specified value occurs in a tuple
	index()	 Searches the tuple for a specified value and returns the position of where it was found


	eg:- to get no of elements in a tuple

	fruits = ("apple", "banana", "cherry")
	print(fruits.count())


	eg:- to find postion a value

	fruits = ("apple", "banana", "cherry")
	print(fruits.index("apple"))



Set

	*Sets are used to store multiple items in a single variable.

	*Set is one of 4 built-in data types in Python used to store collections of data, the other 3 are List, Tuple, and Dictionary, 
	all with different qualities and usage.

	*A set is a collection which is both unordered and unindexed.

	*Sets are written with curly bracket

	eg:-
		thisset = {"apple", "banana", "cherry"}
		print(thisset)


	*Set items are unordered, unchangeable, and do not allow duplicate values

	*Unordered means that the items in a set do not have a defined order.

	*Set items can appear in a different order every time you use them, and cannot be referred to by index or key.
	*Sets are unchangeable, meaning that we cannot change the items after the set has been created.

	*Sets cannot have two items with the same value.

	eg2:
		thisset = {"apple", "banana", "cherry", "apple"}

		print(thisset)


	*It is also possible to use the set() constructor to make a set.

		thisset = set(("apple", "banana", "cherry")) # note the double round-brackets
		print(thisset)

Acessing data from set
	*You cannot access items in a set by referring to an index or a key.

	*But you can loop through the set items using a for loop, or ask if a specified value is present in a set, by using the in keyword.
		eg1:
			thisset = {"apple", "banana", "cherry"}

				for x in thisset:
  					print(x)

	Check if "banana" is present in the set:
		eg:2
			thisset = {"apple", "banana", "cherry"}

			print("banana" in thisset)

Add new data
	*Once a set is created, you cannot change its items, but you can add new items.
	*To add one item to a set use the add() method.
	eg:-
		thisset = {"apple", "banana", "cherry"}
		thisset.add("orange")
		print(thisset)

	Add Sets
	*To add items from another set into the current set, use the update() method.
	eg1:
		thisset = {"apple", "banana", "cherry"}
		tropical = {"pineapple", "mango", "papaya"}

		thisset.update(tropical)

		print(thisset)

	note:-Add elements from tropical into thisset:
Add Any Iterable
	The object in the update() method does not have to be a set, it can be any iterable object (tuples, lists, dictionaries etc.).
		
	eg 2: Add elements of a list to at set:

		thisset = {"apple", "banana", "cherry"}
		mylist = ["kiwi", "orange"]
		thisset.update(mylist)
		print(thisset)

Remove data
	*To remove an item in a set, use the remove(), or the discard() method.

	Eg 1:-Remove "banana" by using the remove() method:

		thisset = {"apple", "banana", "cherry"}
		thisset.remove("banana")
		print(thisset)

	Note: If the item to remove does not exist, remove() will raise an error.

	eg 2:-Remove "banana" by using the discard() method:

		thisset = {"apple", "banana", "cherry"}
		thisset.discard("banana")
		print(thisset)

	Note: If the item to remove does not exist, discard() will NOT raise an error.
   	
	*You can also use the pop() method to remove an item, but this method will remove the last item. Remember that sets are unordered, 
	   so you will not know what item that gets removed.

		The return value of the pop() method is the removed item.

	eg 3:-Remove the last item by using the pop() method:

		thisset = {"apple", "banana", "cherry"}
		x = thisset.pop()
		print(x)
		print(thisset)
	Note: Sets are unordered, so when using the pop() method, you do not know which item that gets removed.

	eg 4:-The clear() method empties the set:

		thisset = {"apple", "banana", "cherry"}
		thisset.clear() 
		print(thisset) # it will return empty ie:- clear will delete all data in that set

	eg 5:-The del keyword will delete the set completely:

		thisset = {"apple", "banana", "cherry"}
		del thisset
		print(thisset) ## will return an  error ie:- del will completely removed the variable so it no longer exist

Loop Items
	*You can loop through the set items by using a for loop:
	
		eg:-Loop through the set, and print the values:
		thisset = {"apple", "banana", "cherry"}

		for x in thisset:
  			print(x)

##########################################################################################################################################################
######################################   Activty 2 :- use tuple to store ,retrive,edit and delete data ###################################################
##########################################################################################################################################################



Join Two Sets
	There are several ways to join two or more sets in Python.

	1)You can use the union() method that returns a new set containing all items from both sets,
 	2)or the update() method that inserts all the items from one set into another:

	eg:-The union() method returns a new set with all items from both sets:

		set1 = {"a", "b" , "c"}
		set2 = {1, 2, 3}

		set3 = set1.union(set2)
		print(set3)

	eg2:- The update() method inserts the items in set2 into set1:

		set1 = {"a", "b" , "c"}
		set2 = {1, 2, 3}

		set1.update(set2)
		print(set1)

	Note: Both union() and update() will exclude any duplicate items.

	3)Keep ONLY the Duplicates
	  The intersection_update() method will keep only the items that are present in both sets.

	 Keep the items that exist in both set x, and set y:

		x = {"apple", "banana", "cherry"}
		y = {"google", "microsoft", "apple"}

		x.intersection_update(y)

		print(x)

	 The intersection() method will return a new set, that only contains the items that are present in both sets.
	 Return a set that contains the items that exist in both set x, and set y:

		x = {"apple", "banana", "cherry"}
		y = {"google", "microsoft", "apple"}

		z = x.intersection(y)

		print(z)

	4)Keep All, But NOT the Duplicates
	  The symmetric_difference_update() method will keep only the elements that are NOT present in both sets.
	  Keep the items that are not present in both sets:

		x = {"apple", "banana", "cherry"}
		y = {"google", "microsoft", "apple"}

		x.symmetric_difference_update(y)

		print(x)
	  The symmetric_difference() method will return a new set, that contains only the elements that are NOT present in both sets.
	  Return a set that contains all items from both sets, except items that are present in both:

		x = {"apple", "banana", "cherry"}
		y = {"google", "microsoft", "apple"}

		z = x.symmetric_difference(y)

		print(z)

Set Methods

	add()				Adds an element to the set
	clear()				Removes all the elements from the set
	copy()				Returns a copy of the set
	difference()			Returns a set containing the difference between two or more sets
	difference_update()		Removes the items in this set that are also included in another, specified set
	discard()			Remove the specified item
	intersection()			Returns a set, that is the intersection of two other sets
	intersection_update()		Removes the items in this set that are not present in other, specified set(s)
	isdisjoint()			Returns whether two sets have a intersection or not
	issubset()			Returns whether another set contains this set or not
	issuperset()			Returns whether this set contains another set or not
	pop()				Removes an element from the set
	remove()			Removes the specified element
	symmetric_difference()		Returns a set with the symmetric differences of two sets
	symmetric_difference_update()	inserts the symmetric differences from this set and another
	union()				Return a set containing the union of sets
	update()			Update the set with the union of this set and others

{1,2,3} ,{4,5,6} are disjoint set: return`s true
{2,4},{2,3} are not disjoint : return`s false


Dictionary
	Dictionaries are used to store data values in key:value pairs.

	A dictionary is a collection which is ordered*, changeable and does not allow duplicates.

	note:- As of Python version 3.7, dictionaries are ordered. In Python 3.6 and earlier, dictionaries are unordered.
	Dictionaries are written with curly brackets, and have keys and values:

		thisdict = {
  			"brand": "Ford",
  			"model": "Mustang",
  			"year": 1964
			}
		print(thisdict)

Dictionary Items

		thisdict = {
  				"brand": "Ford",
  				"model": "Mustang",
  				"year": 1964
			   }
		print(thisdict["brand"])

note :- Ordered or Unordered?

    	When we say that dictionaries are ordered, it means that the items have a defined order, and that order will not change.

	Unordered means that the items does not have a defined order, you cannot refer to an item by using an index.

	Changeable:-
	Dictionaries are changeable, meaning that we can change, add or remove items after the dictionary has been created.

	Duplicates Not Allowed:-
	Dictionaries cannot have two items with the same key:

		thisdict = {
  				"brand": "Ford",
  				"model": "Mustang",
  				"year": 1964,
  				"year": 2020
			   }
		print(thisdict)

	note:-Duplicate values will overwrite existing values:
#########################################################################################################################################################
#########################################################################################################################################################
Dictionary Length

	To determine how many items a dictionary has, use the len() function:
	
	print(len(thisdict))
	
Dictionary Items - Data Types
	
	The values in dictionary items can be of any data type:
	String, int, boolean, and list data types:

		thisdict = {
  		"brand": "Ford",
  		"electric": False,
  		"year": 1964,
  		"colors": ["red", "white", "blue"]
		}

type()
	
	dictionaries are defined as objects with the data type 'dict':
	
	thisdict = {
  		"brand": "Ford",
  		"model": "Mustang",
  		"year": 1964
		}
	print(type(thisdict))

Accessing Items

	You can access the items of a dictionary by referring to its key name, inside square brackets:
	Get the value of the "model" key:
	thisdict = {
  		"brand": "Ford",
  		"model": "Mustang",
  		"year": 1964
		}
	x = thisdict["model"]

	There is also a method called get() that will give you the same result:
eg1:-
	thisdict =	{
  		"brand": "Ford",
  		"model": "Mustang",
  		"year": 1964
		}
	x = thisdict.get("model")

eg2:-
	thisdict =	{
  		"brand": "Ford",
  		"model1": "Mustang",
  		"year": 1964
		}
	x = thisdict.get("model"," no data ")
	print(x)

Get Keys

	The keys() method will return a list of all the keys in the dictionary.

	x = thisdict.keys()
	The list of the keys is a view of the dictionary, 
	meaning that any changes done to the dictionary will be reflected in the keys list.
	Add a new item to the original dictionary, and see that the keys list gets updated as well
eg:-
	car = {
	"brand": "Ford",
	"model": "Mustang",
	"year": 1964
	}

	x = car.keys()

	print(x) #before the change

	car["color"] = "white"

	print(x) #after the change

Get Values
	The values() method will return a list of all the values in the dictionary.
eg1:-
	thisdict = {
 	 "brand": "Ford",
 	 "model": "Mustang",
 	 "year": 1964
	}

	x = thisdict.values()

	print(x)
eg2:-

	thisdict = {
  	"brand": "Ford",
  	"model": "Mustang",
  	"year": [1964,1656]
	}

	x = thisdict.values()

	print(x)

note:-The list of the values is a view of the dictionary, 
meaning that any changes done to the dictionary will be reflected in the values list.
eg3:-
	car = {
	"brand": "Ford",
	"model": "Mustang",
	"year": 1964
	}

	x = car.values()

	print(x) #before the change

	car["year"] = 2020

	print(x) #after the change

Get Items
	The items() method will return each item in a dictionary, as tuples in a list.
eg1:-
	thisdict = {
  	"brand": "Ford",
  	"model": "Mustang",
  	"year": 1964
	}

	x = thisdict.items()

	print(x)

The returned list is a view of the items of the dictionary, meaning that any changes done to the dictionary will be reflected 
in the items list.

Make a change in the original dictionary, and see that the items list gets updated as well:

eg2:-

	car = {
	"brand": "Ford",
	"model": "Mustang",
	"year": 1964
	}

	x = car.items()

	print(x) #before the change

	car["year"] = 2020

	print(x) #after the change
eg3:-
	car = {
	"brand": "Ford",
	"model": "Mustang",
	"year": 1964
	}

	x = car.items()

	print(x) #before the change
	car["color"] = "red"

	print(x) #after the change


Check if Key Exists
	To determine if a specified key is present in a dictionary use the in keyword:

	Check if "model" is present in the dictionary:
	eg1:-
	
	thisdict = {
  	"brand": "Ford",
  	"model": "Mustang",
 	"year": 1964
	}
	if "model" in thisdict:
  		print("Yes, 'model' is one of the keys in the thisdict dictionary")

Change Values
	You can change the value of a specific item by referring to its key name:

	Change the "year" to 2018:
eg1 :-
	thisdict = {
  	"brand": "Ford",
  	"model": "Mustang",
  	"year": 1964
	}
	thisdict["year"] = 2018

Update Dictionary
	The update() method will update the dictionary with the items from the given argument.

	The argument must be a dictionary, or an iterable object with key:value pairs.

	Update the "year" of the car by using the update() method:
eg2:-
	thisdict = {
  	"brand": "Ford",
  	"model": "Mustang",
  	"year": 1964
	}
	thisdict.update({"year": 2020})

Adding Items
	Adding an item to the dictionary is done by using a new index key and assigning a value to it:
	eg1:

	thisdict = {
  	"brand": "Ford",
  	"model": "Mustang",
  	"year": 1964
	}
	thisdict["color"] = "red"
	print(thisdict)

Update Dictionary
	The update() method will update the dictionary with the items from a given argument. If the item does not exist,
	 the item will be added.

	The argument must be a dictionary, or an iterable object with key:value pairs.
	Add a color item to the dictionary by using the update() method:

	eg2:-
	thisdict = {
  	"brand": "Ford",
  	"model": "Mustang",
  	"year": 1964
	}
	thisdict.update({"color": "red"})

Removing Items

	There are several methods to remove items from a dictionary:

	The pop() method removes the item with the specified key name:
	eg1:-

	thisdict = {
  	"brand": "Ford",
  	"model": "Mustang",
  	"year": 1964
	}
	thisdict.pop("model")
	print(thisdict)

The popitem() method removes the last inserted item (in versions before 3.7, a random item is removed instead):
eg2:-
	thisdict = {
  	"brand": "Ford",
  	"model": "Mustang",
  	"year": 1964
	}
	thisdict.popitem()
	print(thisdict)

The del keyword removes the item with the specified key name:
eg3-
	thisdict = {
  	"brand": "Ford",
  	"model": "Mustang",
  	"year": 1964
	}
	del thisdict["model"]
	print(thisdict)

The del keyword can also delete the dictionary completely:
eg 4 :-
	thisdict = {
  	"brand": "Ford",
  	"model": "Mustang",
  	"year": 1964
	}
	del thisdict
	print(thisdict) #this will cause an error because "thisdict" no longer exists.


The clear() method empties the dictionary:
eg 5:-
	thisdict = {
	  "brand": "Ford",
	  "model": "Mustang",
	  "year": 1964
	}
	thisdict.clear()
	print(thisdict)

Loop Through a Dictionary
	You can loop through a dictionary by using a for loop.
	When looping through a dictionary, the return value are the keys of the dictionary, 
	but there are methods to return the values as well.
eg1:-
	thisdict =	{
  	"brand": "Ford",
  	"model": "Mustang",
  	"year": 1964
	}
	for x in thisdict:
  		print(x)
Print all values in the dictionary, one by one:
eg 2 :-
	thisdict =	{
	  "brand": "Ford",
	  "model": "Mustang",
	  "year": 1964
	}
	for x in thisdict:
  		print(thisdict[x])
You can also use the values() method to return values of a dictionary:
eg 3:-
	thisdict =	{
	  "brand": "Ford",
	  "model": "Mustang",
	  "year": 1964
	}
	for x in thisdict.values():
  		print(x)
You can use the keys() method to return the keys of a dictionary:
eg 4:-
	thisdict =	{
	  "brand": "Ford",
	  "model": "Mustang",
	  "year": 1964
	}
	for x in thisdict.keys():
  		print(x)


Loop through both keys and values, by using the items() method:
eg 5:-
	thisdict =	{
	  "brand": "Ford",
	  "model": "Mustang",
	  "year": 1964
	}
	for x, y in thisdict.items():
  		print(x, y)

...........................................................................................
The frozenset() is an inbuilt function is Python which takes an iterable object as input and makes them immutable. 
Simply it freezes the iterable objects and makes them unchangeable.

In Python, frozenset is the same as set except the forzensets are immutable which means that elements
 from the frozenset cannot be added or removed once created. This function takes input as any iterable
 object and converts them into an immutable object. The order of elements is not guaranteed to be preserved.

	Syntax : frozenset(iterable_object_name)

	Parameter : This function accepts iterable object as input parameter.

	Return Type: This function return an equivalent frozenset object.

eg:- Python program to understand frozenset() function
  
	# tuple of numbers
	nu = (1, 2, 3, 4, 5, 6, 7, 8, 9)
  
	# converting tuple to frozenset
	fnum = frozenset(nu)
  
	# printing details
	print("frozenset Object is : ", fnum)

note:- If no parameters are passed to frozenset() function then it returns a empty frozenset type object.


Since frozenset object are immutable they are mainly used as key in dictionary or elements of other sets. Below example explains it clearly.

eg:- Python program to understand use of frozenset function
  	
	# creating a dictionary 
	Student = {"name": "Ankit", "age": 21, "sex": "Male", 
           "college": "MNNIT Allahabad", "address": "Allahabad"}
  
	# making keys of dictionary as frozenset
	key = frozenset(Student)
  
	# printing keys details
	print('The frozen set is:', key)


If by mistake we want to change the frozenset object then it throws an error “‘frozenset’ object does not support item assignment“.
eg3:-
	# creating a list 
	favourite_subject = ["OS", "DBMS", "Algo"]  
	# making it frozenset type
	f_subject = frozenset(favourite_subject) 
	# below line will generate error
  	f_subject[1] = "Networking"



